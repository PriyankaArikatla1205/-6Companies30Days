/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static int index;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
     Map<Integer,Integer> map = new HashMap<>();
     for(int i=0;i<inorder.length;i++){
         map.put(inorder[i],i);
     }
   
    AtomicInteger pIndex = new AtomicInteger(postorder.length-1);
     TreeNode root = build( 0, inorder.length-1, postorder, pIndex,map);
     return root;
        
    }
    static TreeNode build( int inStart, int inEnd, int[]postorder, AtomicInteger pIndex, Map<Integer, Integer> map){
        if(inStart>inEnd ){
            return null;
        }
    
        TreeNode root = new TreeNode(postorder[pIndex.getAndDecrement()]);
        int key = map.get(root.val);
    
       
    
   
        root.right =build(key+1, inEnd, postorder, pIndex,map);
        root.left=build( inStart, key-1, postorder,pIndex, map);
        return root;
    }
}
